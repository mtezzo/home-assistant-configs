blueprint:
  name: Inovelli Dimmer Switch + Philips Hue Bulb Control (ZWave-JS + Hue)
  description: |
    For Inovelli Red Series 2-in-1 switch + dimmer, model VZW31-SN in Smart Bulb Mode for controlling Hue Lights.
  domain: automation
  input:
    zwavejs_device:
      name: Inovelli Smart Dimmer (Z-WaveJS)
      description: Select the sensor device which offers scene selection.
        Listed devices are not guaranteed to work with any/all of these button mappings.
      selector:
        device:
          integration: zwave_js
          manufacturer: Inovelli
          model: VZW31-SN
          multiple: false
    light:
      name: (Required) Hue Light
      description: The Hue light which will be controlled with this automation.
      selector:
        entity:
          integration: hue
          domain: light
    default_scene:
      name: Default Scene
      description: Activate a Hue Scene on Key Up/On press 1x.
      default: ''
      selector:
        entity:
          integration: hue
          domain: scene
    light_transition:
      name: (Optional) Light Transition
      description: Number that represents the time (in milliseconds) the light should take turn on or off, if the light supports it.
      default: 250
      selector:
        number:
          min: 0
          max: 60000
          step: 1
          unit_of_measurement: milliseconds
          mode: box
    min_brightness:
      name: (Optional) Light minimum brightness
      description: The minimum brightness the light can be set with this automation.
      default: 1
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    max_brightness:
      name: (Optional) Light maximum brightness
      description: The maximum brightness the light can be set with this automation.
      default: 255
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    brightness_steps_short:
      name: (Optional) Light brightness steps - short actions
      description: Number of steps from min to max brightness when controlling brightness with short actions (eg. button press).
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    brightness_steps_long:
      name: (Optional) Light brightness steps - long actions
      description: Number of steps from min to max brightness when controlling brightness with long actions (eg. button hold or controller rotation).
      default: 10
      selector:
        number:
          min: 1
          max: 255
          step: 1
          unit_of_measurement: steps
          mode: box
    force_brightness:
      name: (Optional) Force brightness value at turn on
      description: Force brightness to the "On brightness" input value, when the light is being turned on.
      default: false
      selector:
        boolean:
    on_brightness:
      name: (Optional) On brightness
      description: Brightness value to force when turning on the light
      default: 1
      selector:
        number:
          min: 0
          max: 255
          step: 1
          unit_of_measurement: brightness
          mode: slider
    smooth_power_on:
      name: (Optional) Smooth power on
      description: Force the light to turn on at minimum brightness when a brightness up command (single or continuous) is triggered and light is off.
      default: true
      selector:
        boolean:
    smooth_power_off:
      name: (Optional) Smooth power off
      description: Allow a brightness down command (single or continuous) to turn off the light when at minimum brightness. Disabling this will prevent the light from being turned off by brightness down commands.
      default: true
      selector:
        boolean:
    is_key_up_scene_two:
      name: Key Up/Down orientation
      description: The key-up scene button varies for some devices. Toggle this value
        when the up/down buttons are backwards.
      default: true
      selector:
        boolean:
    key_up:
      name: Key Up/On press 1x
      description: Action to run, when the up button is pressed one time.
      default: []
      selector:
        action: {}
    key_config:
      name: Config scene
      description: Action to run, when the config button is pressed
      default: []
      selector:
        action: {}
    key_up_held:
      name: Key Up/On held
      description: Action to run, when the up button is held.
      default: []
      selector:
        action: {}
    key_down_held:
      name: Key Down/Off held
      description: Action to run, when the down button is held.
      default: []
      selector:
        action: {}
    key_config_held:
      name: Key Config held
      description: Action to run, when the config button is held.
      default: []
      selector:
        action: {}
    key_up_released:
      name: Key Up/On released
      description: Action to run, when the up button is released.
      default: []
      selector:
        action: {}
    key_down_released:
      name: Key Down/Off released
      description: Action to run, when the down button is released.
      default: []
      selector:
        action: {}
    key_config_released:
      name: Key Config released
      description: Action to run, when the config button is released.
      default: []
      selector:
        action: {}   
    key_up_2x:
      name: Key Up/On press 2x
      description: Action to run, when the up button is pressed two times.
      default: []
      selector:
        action: {}
    key_down_2x:
      name: Key Down/Off press 2x
      description: Action to run, when the down button is pressed two times.
      default: []
      selector:
        action: {}
    key_config_2x:
      name: Config Press 2x
      description: Action to run, when the config button is pressed two times.
      default: []
      selector:
        action: {}
    key_up_3x:
      name: Key Up/On press 3x
      description: Action to run, when the up button is pressed three times.
      default: []
      selector:
        action: {}
    key_down_3x:
      name: Key Down/Off press 3x
      description: Action to run, when the down button is pressed three times.
      default: []
      selector:
        action: {}
    key_config_3x:
      name: Config Press 3x
      description: Action to run, when the config button is pressed three times.
      default: []
      selector:
        action: {}
    key_up_4x:
      name: Key Up/On press 4x
      description: Action to run, when the up button is pressed four times.
      default: []
      selector:
        action: {}
    key_down_4x:
      name: Key Down/Off press 4x
      description: Action to run, when the down button is pressed four times.
      default: []
      selector:
        action: {}
    key_config_4x:
      name: Config Press 4x
      description: Action to run, when the config button is pressed four times.
      default: []
      selector:
        action: {}
    key_up_5x:
      name: Key Up/On press 5x
      description: Action to run, when the up button is pressed five times.
      default: []
      selector:
        action: {}
    key_down_5x:
      name: Key Down/Off press 5x
      description: Action to run, when the down button is pressed five times.
      default: []
      selector:
        action: {}
    key_config_5x:
      name: Config Press 5x
      description: Action to run, when the config button is pressed five times.
      default: []
      selector:
        action: {}
# mode restart ensures hold actions are interrupted when the corresponding release action is received
mode: restart
max_exceeded: silent
variables:
  zwavejs_device: !input 'zwavejs_device'
  is_key_up_scene_two: !input 'is_key_up_scene_two'
  key_up_scene_id: '{{ ( (1,2)[is_key_up_scene_two] | int ) }}'
  key_down_scene_id: '{{ ( (2,1)[is_key_up_scene_two] | int ) }}'
  light: !input light
  default_scene: !input default_scene
  light_transition: !input light_transition
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  brightness_steps_short: !input brightness_steps_short
  brightness_steps_long: !input brightness_steps_long
  force_brightness: !input force_brightness
  on_brightness: !input on_brightness
  smooth_power_on: !input smooth_power_on
  smooth_power_off: !input smooth_power_off
  step_short: '{{ (max_brightness-min_brightness)/brightness_steps_short }}'
  step_long: '{{ (max_brightness-min_brightness)/brightness_steps_long }}'
trigger:
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input zwavejs_device
condition: '{{ trigger.event.data.device_id == (zwavejs_device | string) and trigger.event.data.command_class == 91 }}'
action:
  - variables:
      scene_id: '{{ (trigger.event.data.property_key_name | int) }}' # values 001,002 and sometimes 003
      key_pressed: '{{ trigger.event.data.value }}'
  - choose:
    - conditions: '{{ scene_id == key_up_scene_id and key_pressed == "KeyPressed" }}' # Up Pressed 1x
      sequence:
        - choose:
            - conditions: '{{ default_scene != "" }}'
              sequence:
                - service: hue.activate_scene
                  entity_id: !input default_scene
                  data:
                    transition: '{{ light_transition / 1000 }}'
                - delay:
                    milliseconds: '{{ light_transition + 500 }}'
                - service: light.turn_on
                  target:
                    device_id: !input zwavejs_device
                  data:
                    brightness: '{{ state_attr(light, "brightness") | default(255) | int }}'
          default:
            - choose:
                - conditions: '{{ force_brightness }}'
                  sequence:
                    - service: light.turn_on
                      entity_id: !input light
                      data:
                        brightness: !input on_brightness
                        transition: '{{ (on_brightness / 255) * (light_transition / 1000) }}'
              default:
                - service: light.turn_on
                  entity_id: !input light
                  data:
                    transition: '{{ light_transition / 1000 }}'
    - conditions: '{{ scene_id == key_down_scene_id and key_pressed == "KeyPressed" }}' # Down Pressed 1x
      sequence:
        - service: light.turn_off
          entity_id: !input light
          data:
            transition: '{{ ((state_attr(light,"brightness") | default(0) | int) / 255) * (light_transition / 1000) }}'
    - conditions: '{{ scene_id == 3 and key_pressed == "KeyPressed" }}'
      sequence: !input 'key_config'
    - conditions: '{{ scene_id == key_up_scene_id and key_pressed == "KeyReleased" }}'
      sequence: !input 'key_up_released'
    - conditions: '{{ scene_id == key_down_scene_id and key_pressed == "KeyReleased" }}'
      sequence: !input 'key_down_released'
    - conditions: '{{ scene_id == 3 and key_pressed == "KeyReleased" }}'
      sequence: !input 'key_config_released'
    - conditions: '{{ scene_id == key_up_scene_id and key_pressed == "KeyHeldDown" }}' # Up held down
      sequence:
        # first step for the smooth power on feature: subsequent steps can skip this check since light will be already on
        - choose:
            # if light is off and smooth power on is disabled, turn it on at the previously saved brightness
            - conditions: '{{ states(light) == "off" and not smooth_power_on}}'
              sequence:
                - service: light.turn_on
                  data:
                    transition: '{{ light_transition / 1000 }}'
                    entity_id: !input light
                - delay:
                    milliseconds: !input light_transition
            # if light is off and smooth power on is enabled, turn it on at minimum brightness
            - conditions: '{{ states(light) == "off" and smooth_power_on}}'
              sequence:
                - service: light.turn_on
                  data:
                    brightness: '{{ min_brightness }}'
                    transition: '{{ light_transition / 1000 }}'
                    entity_id: !input light
                - delay:
                    milliseconds: !input light_transition
        # else move on to the loop for increasing the light brightness
        - repeat:
            while: '{{ true }}'
            sequence:
              - service: light.turn_on
                data:
                  brightness: '{{ [ [(state_attr(light,"brightness") | default(0) | int)+step_long, min_brightness] | max, max_brightness] | min }}'
                  transition: 0.25
                  entity_id: !input light
              - delay:
                  milliseconds: 250
    - conditions: '{{ scene_id == key_down_scene_id and key_pressed == "KeyHeldDown" and states(light) == "on" }}' # Down Key held down
      sequence:
        - choose:
            # using a separate sequence for the smooth power off feature to not perform unnecessary checks at every iteration when the feature is disabled
            - conditions: '{{ smooth_power_off }}'
              sequence:
                - repeat:
                    # continue lowering brightness until the light turns off
                    while: '{{ states(light) != "off" }}'
                    sequence:
                      - choose:
                          # if the light is at minimum brightness, turn it off
                          - conditions: '{{ state_attr(light,"brightness") == min_brightness }}'
                            sequence:
                              - service: light.turn_off
                                data:
                                  transition: '{{ light_transition / 1000 }}'
                                  entity_id: !input light
                              - delay:
                                  milliseconds: !input light_transition
                        # else lower the light's brightness
                        default:
                          - service: light.turn_on
                            data:
                              brightness: '{{ [ [(state_attr(light,"brightness") | default(1) | int )-step_long, min_brightness] | max, max_brightness] | min }}'
                              transition: 0.25
                              entity_id: !input light
                          - delay:
                              milliseconds: 250
          default:
            - repeat:
                # continue lowering brightness until the light turns off
                while: '{{ states(light) != "off" }}'
                sequence:
                  # lower the light's brightness. since smooth power off is disabled, never let the brightness move below the user-provided minimum
                  - service: light.turn_on
                    data:
                      brightness: '{{ [ [(state_attr(light,"brightness") | default(1) | int )-step_long, min_brightness] | max, max_brightness] | min }}'
                      transition: 0.25
                      entity_id: !input light
                  - delay:
                      milliseconds: 250
    - conditions: '{{ scene_id == 3 and key_pressed == "KeyHeldDown" }}'
      sequence: !input 'key_config_held'
    - conditions: '{{ scene_id == key_up_scene_id and key_pressed == "KeyPressed2x" }}'
      sequence: !input 'key_up_2x'
    - conditions: '{{ scene_id == key_down_scene_id and key_pressed == "KeyPressed2x" }}'
      sequence: !input 'key_down_2x'
    - conditions: '{{ scene_id == 3 and key_pressed == "KeyPressed2x" }}'
      sequence: !input 'key_config_2x'
    - conditions: '{{ scene_id == key_up_scene_id and key_pressed == "KeyPressed3x" }}'
      sequence: !input 'key_up_3x'
    - conditions: '{{ scene_id == key_down_scene_id and key_pressed == "KeyPressed3x" }}'
      sequence: !input 'key_down_3x'
    - conditions: '{{ scene_id == 3 and key_pressed == "KeyPressed3x" }}'
      sequence: !input 'key_config_3x'
    - conditions: '{{ scene_id == key_up_scene_id and key_pressed == "KeyPressed4x" }}'
      sequence: !input 'key_up_4x'
    - conditions: '{{ scene_id == key_down_scene_id and key_pressed == "KeyPressed4x" }}'
      sequence: !input 'key_down_4x'
    - conditions: '{{ scene_id == 3 and key_pressed == "KeyPressed4x" }}'
      sequence: !input 'key_config_4x'
    - conditions: '{{ scene_id == key_up_scene_id and key_pressed == "KeyPressed5x" }}'
      sequence: !input 'key_up_5x'
    - conditions: '{{ scene_id == key_down_scene_id and key_pressed == "KeyPressed5x" }}'
      sequence: !input 'key_down_5x'
    - conditions: '{{ scene_id == 3 and key_pressed == "KeyPressed5x" }}'
      sequence: !input 'key_config_5x'
